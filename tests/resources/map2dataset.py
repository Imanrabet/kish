import os
import json
import gzip
import random
import argparse

'''
Convert a map file generated by harvester into a dataset file descriptor that
can be loaded in KISH

input: jsonl file map.json

{
    "id": "03582f70-2463-45e6-af96-4a3dc78e87c3", 
    "DOI": "10.1080/10486801.2021.1878511", 
    "oaLink": "https://www.tandfonline.com/doi/pdf/10.1080/10486801.2021.1878511?needAccess=true", 
    "pdf_file_path": "03/58/2f/70/03582f70-2463-45e6-af96-4a3dc78e87c3/03582f70-2463-45e6-af96-4a3dc78e87c3.pdf", 
    "json_metadata_file_path": "03/58/2f/70/03582f70-2463-45e6-af96-4a3dc78e87c3/03582f70-2463-45e6-af96-4a3dc78e87c3.json"
}
...

(note above is jsonl, one json per line, it has been reformatted for reading purposes)

output: json 

{
    "documents": [
        {
            "id": "03582f70-2463-45e6-af96-4a3dc78e87c3",
            "doi": "10.1080/10486801.2021.1878511",
            "full_text_url": "https://www.tandfonline.com/doi/pdf/10.1080/10486801.2021.1878511?needAccess=true",
            "full_text_pdf_uri": "03/58/2f/70/03582f70-2463-45e6-af96-4a3dc78e87c3/03582f70-2463-45e6-af96-4a3dc78e87c3.pdf",
            "full_text_tei_uri": "03/58/2f/70/03582f70-2463-45e6-af96-4a3dc78e87c3/03582f70-2463-45e6-af96-4a3dc78e87c3.tei.xml",
            "texts": []
        },
        ...
    ]
}
'''

def convert(json_map_file: str, dataset_json_path: str):
    if json_map_file.endswith(".gz"):
        f = gzip.open(json_map_file,'rb')
    else:
        f = open(json_map_file, "r")

    new_documents = []

    for line in f:
        document = json.loads(line)
        if "pdf_file_path" not in document:
            continue

        new_document = {}
        new_document["id"] = document["id"]
        new_document["doi"] = document["DOI"]
        new_document["full_text_url"] = document["oaLink"]
        new_document["full_text_pdf_uri"] = document["pdf_file_path"]
        new_document["full_text_tei_uri"] = document["pdf_file_path"].replace(".pdf", ".tei.xml")
        new_document["texts"] = []

        new_documents.append(new_document)

    f.close()

    new_corpus = {}
    new_corpus["documents"] = new_documents

    # create a single json output with the document entries ready for KISH loading
    with open(dataset_json_path, 'w') as outfile:
        json.dump(new_corpus, outfile, indent=4)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description = "Convert harvester map file into dataset description file for KISH")

    parser.add_argument('-j','--json', type=str, help='path to the JSON map file generated by the harvester', required=True)
    parser.add_argument("--output", type=str, 
        help="path where to generate the dataset description file for KISH")

    args = parser.parse_args()
    json_map_file = args.json
    dataset_json_path = args.output

    # check path and call methods
    if json_map_file is None or not os.path.isfile(json_map_file):
        print("error: the path to one of the JSON map file is not valid: ", json_map_file)
        exit(0)

    if not json_map_file.endswith(".json") and not json_map_file.endswith(".json.gz"):
        print("JSON map file  has invalid file extension: " + json_map_file)
        exit(0)

    convert(json_map_file, dataset_json_path)
